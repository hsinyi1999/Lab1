Script started on 2019Âπ¥03Êúà 4Êó• ‰∏ãÂçà 10:21:11
]0;~
[32mÈô≥‰ø°Á¶ï@MSI [33m~[0m
$ whoamu[Ki; pwd
Èô≥‰ø°Á¶ï
/home/Èô≥‰ø°Á¶ï
]0;~
[32mÈô≥‰ø°Á¶ï@MSI [33m~[0m
$  git config -l[1P[C[C[C[C[C[C[C[C[C[C[C[C[C
[?1h=user.name=hsinyi1999[m
user.email=hsinyi880305@gmail.com[m
core.repositoryformatversion=0[m
core.filemode=true[m
core.bare=false[m
core.logallrefupdates=true[m
core.ignorecase=true[m
[K[?1l>]0;~
[32mÈô≥‰ø°Á¶ï@MSI [33m~[0m
$ git config -1
error: unknown switch `1'
usage: git config [<options>]

Config file location
    --global              use global config file
    --system              use system config file
    --local               use repository config file
    -f, --file <file>     use given config file
    --blob <blob-id>      read config from given blob object

Action
    --get                 get value: name [value-regex]
    --get-all             get all values: key [value-regex]
    --get-regexp          get values for regexp: name-regex [value-regex]
    --get-urlmatch        get value specific for the URL: section[.var] URL
    --replace-all         replace all matching variables: name value [value_regex]
    --add                 add a new variable: name value
    --unset               remove a variable: name [value-regex]
    --unset-all           remove all matches: name [value-regex]
    --rename-section      rename section: old-name new-name
    --remove-section      remove a section: name
    -l, --list            list all
    -e, --edit            open an editor
    --get-color           find the color configured: slot [default]
    --get-colorbool       find the color setting: slot [stdout-is-tty]

Type
    --bool                value is "true" or "false"
    --int                 value is decimal number
    --bool-or-int         value is --bool or --int
    --path                value is a path (file or directory name)
    --expiry-date         value is an expiry date

Other
    -z, --null            terminate values with NUL byte
    --name-only           show variable names only
    --includes            respect include directives on lookup
    --show-origin         show origin of config (file, standard input, blob, command line)

]0;~
[32mÈô≥‰ø°Á¶ï@MSI [33m~[0m
$ git clone 
fatal: You must specify a repository to clone.

usage: git clone [<options>] [--] <repo> [<dir>]

    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --progress            force progress reporting
    -n, --no-checkout     don't create a checkout
    --bare                create a bare repository
    --mirror              create a mirror repository (implies bare)
    -l, --local           to clone from a local repository
    --no-hardlinks        don't use local hardlinks, always copy
    -s, --shared          setup as shared repository
    --recurse-submodules[=<pathspec>]
                          initialize submodules in the clone
    -j, --jobs <n>        number of submodules cloned in parallel
    --template <template-directory>
                          directory from which templates will be used
    --reference <repo>    reference repository
    --reference-if-able <repo>
                          reference repository
    --dissociate          use --reference only while cloning
    -o, --origin <name>   use <name> instead of 'origin' to track upstream
    -b, --branch <branch>
                          checkout <branch> instead of the remote's HEAD
    -u, --upload-pack <path>
                          path to git-upload-pack on the remote
    --depth <depth>       create a shallow clone of that depth
    --shallow-since <time>
                          create a shallow clone since a specific time
    --shallow-exclude <revision>
                          deepen history of shallow clone, excluding rev
    --single-branch       clone only one branch, HEAD or --branch
    --no-tags             don't clone any tags, and make later fetches not to follow them
    --shallow-submodules  any cloned submodules will be shallow
    --separate-git-dir <gitdir>
                          separate git dir from working tree
    -c, --config <key=value>
                          set config inside the new repository
    -4, --ipv4            use IPv4 addresses only
    -6, --ipv6            use IPv6 addresses only
    --filter <args>       object filtering

]0;~
[32mÈô≥‰ø°Á¶ï@MSI [33m~[0m
$ git clone https://github.com/hsinyi1999/Lab1.git
Cloning into 'Lab1'...
warning: You appear to have cloned an empty repository.
]0;~
[32mÈô≥‰ø°Á¶ï@MSI [33m~[0m
$ https://github.com/hsinyi1999/Lab1[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kexit

Script done on 2019Âπ¥03Êúà 4Êó• ‰∏ãÂçà 10:23:31
